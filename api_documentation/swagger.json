{
  "swagger": "2.0",
  "info": {
    "description": "This is a documentation of RESTful APIs used to power Event Hub website. A Bright events challenge website developed from the beginning of the Andela Kenya Cohort 23 Bootcamp in Nairobi. The website allows users to upload manage and view events. You can find out more about the EventHub website at the linked  [GitHub Repo](https://github.com/Kalela/BrightEvents).",
    "version": "1.0.0",
    "title": "Bright Events Philip Kalela",
    "contact": {
      "email": "philipkalela@gmail.com"
    }
  },
  "host": "localhost:5000",
  "basePath": "/",
  "tags": [
    {
      "name": "EventHub",
      "description": "Everything about Bright Event APIs",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://github.com/Kalela/BrightEvents"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/v2/auth/register": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Register a user to the database",
        "description": "This endpoint creates a new user and saves their data",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username of the users choice",
            "required": true,
            "type": "string"
          },
          {
            "name": "passowrd",
            "in": "query",
            "description": "Password of the users choice",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful user registration",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v2/auth/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Log in registered users",
        "description": "This endpoint allows existing users to access their event information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Username that user registered with",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password that user registered with",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful user login",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Users"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/api/v2/auth/logout": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Log a user out of a session",
        "description": "Removes the user from the current session",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "User successfully logged out",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/v2/auth/reset-password": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Resets the users password",
        "description": "User can change password to a new one",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Users username",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Users current password",
            "required": true,
            "type": "string"
          },
          {
            "name": "new_password",
            "in": "query",
            "description": "Users new password",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "user password reset",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/api/v2/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Returns all events stored in class data",
        "description": "Returns a dictionary containing all events stored in event class",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "no events found"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Add a new event to event list",
        "description": "Adds the event to the event class",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "query",
            "description": "Name of the event to be added",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Location of the event to be added",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of the event",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "event successfully added",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid Input"
          }
        }
      }
    },
    "/api/v2/events/{eventid}": {
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Edit an existing event",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "path",
            "description": "Name of event to be edited",
            "required": true,
            "type": "string"
          },
          {
            "name": "eventid",
            "in": "query",
            "description": "Name that event is changed to",
            "required": true,
            "type": "string"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Location that event is changed to",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date that event is changed to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "editing event successful",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "400": {
            "description": "Invalid Input"
          },
          "404": {
            "description": "event not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Delete existing events by id",
        "description": "",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "path",
            "description": "Name of event to be de",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "deleting event successful",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          },
          "404": {
            "description": "event not found"
          }
        }
      }
    },
    "/api/v2/events/{eventid}/rsvp": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Send RSVP to existing event",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "path",
            "description": "Name of event to send RSVP to",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Event"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Users": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Event": {
      "type": "object",
      "properties": {
        "eventid": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about BrightEvents",
    "url": "https://github.com/Kalela/BrightEvents"
  }
}